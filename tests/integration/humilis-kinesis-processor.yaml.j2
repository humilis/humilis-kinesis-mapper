---
humilis-kinesis-processor:

    description:
        A dummy environment for testing the map-uaparser processor

    layers:
        # A S3 bucket to test Firehose delivery
        - layer: storage

        - layer: s3delivery
          layer_type: firehose
          s3_buffer_seconds: 60
          streams:
              - name: DeliveryStream1
                s3_prefix: stream1/
              - name: DeliveryStream2
                s3_prefix: stream2/
              - name: DeliveryStream3
                s3_prefix: stream3/

        # The I/O Kinesis streams
        - layer: streams
          layer_type: streams
          streams:
              # Use two shards to test support for multiple shards
              - name: InputStream
                shard_count: 1
              - name: OutputStream1
                shard_count: 2
              - name: OutputStream2
                shard_count: 1
              - name: ErrorStream
                shard_count: 1
              - name: LogStream
                shard_count: 1

        # Tests all features of the kinesis processor
        - layer: kinesis-processor
          layer_type: kinesis-processor
          received_at_field: received_at
          logs_destination_arn:
            $layer_output:
                layer_name: streams
                output_name: LogStreamArn
          logs_filter_pattern: INFO
          variables:
            mydummyvar: mydummyval
          # Determines the target shard for an event
          dynamodb_capacity:
            read: 5
            write: 5
          # The number of events processed in one Lambda invokation
          batch_size: 1
          # Additional IAM permission to write to Elastic Search
          iam_actions: [{action: "es:*", resource: "*"}]
          kms_key_admins:
            - german
          lambda_dependencies:
            - user-agents
            - mycode/mypkg
          input:
            kinesis_stream: {layer: streams, name: InputStream}
            filter: mypkg:input_filter
            mapper: mypkg.module:input_mapper
            firehose_delivery_stream:
              # Multiple delivery streams for the input are supported
              - {layer: s3delivery, name: DeliveryStream3}
          error:
            kinesis_stream: {layer: streams, name: ErrorStream}
            partition_key: False
          output:
            - filter: mypkg:output_filter_1
              mapper: mypkg:output_mapper_1
              kinesis_stream: {layer: streams, name: OutputStream1}
              firehose_delivery_stream: {layer: s3delivery, name: DeliveryStream1}
              partition_key: mypkg:partition_key

            - mapper: mypkg:output_mapper_2
              # No filter specified: passthrough all
              kinesis_stream: {layer: streams, name: OutputStream2}
              firehose_delivery_stream:
                # Multiple delivery streams are supported
                - {layer: s3delivery, name: DeliveryStream1}
                - layer: s3delivery
                  name: DeliveryStream2
                  filter: mypkg:output_filter_2b
                  mapper: mypkg:output_mapper_2b

              partition_key: mypkg:partition_key

        # Keeps secrets: the Sentry token
        - layer: secrets-vault
          layer_type: secrets-vault
          associated_processors:
              - kinesis-processor
